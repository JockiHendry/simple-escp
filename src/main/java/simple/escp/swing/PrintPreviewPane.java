/*
 * Copyright 2014 Jocki Hendry
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package simple.escp.swing;

import simple.escp.FillJob;
import simple.escp.SimpleEscp;
import simple.escp.Template;
import simple.escp.data.DataSources;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Map;
import java.util.Vector;

/**
 *  Use <code>PrintPreviewPane</code> to display string generated by simple-escp's <code>Template</code>.
 *  The panel includes a print button and printer selection (by name).
 *
 *  <p>Because some configurations for text mode printing is stored in printer's RAM and can't be read using
 *  ESC/P commands, <code>PrintPreviewPane</code> will not attempt to create an exact print preview.
 *  All characters is printed using the same monospace font and ESC/P commands are ignored.  You must also
 *  specificy the page length and page width for print preview.  These values is used for previewing only and
 *  will not affect printing.
 *
 */
public class PrintPreviewPane extends JPanel implements ActionListener {

    private String text;
    private JScrollPane scrollPane;
    private OutputPane outputPane;
    private JToolBar toolbar;
    private JButton printButton;
    private JComboBox<String> printerNameComboBox;

    /**
     * Create a new instance of <code>PrintPreviewPane</code> based on a <code>Template</code> and its
     * value (a <code>Map</code> and/or an object).  Template <strong>must</strong> have a valid value
     * for <code>pageLength</code> and <code>pageWidth</code> in its <code>pageFormat</code>.
     *
     * @param template an instance of <code>Template</code>.
     * @param mapValue to fill placholders in the <code>Template</code>.
     * @param objectValue to fill placeholders in the <code>Template</code>.
     */
    public PrintPreviewPane(Template template, Map mapValue, Object objectValue) {
        this(new FillJob(template.parse(), DataSources.from(mapValue, objectValue)).fill(),
            template.getPageFormat().getPageLength(),
            template.getPageFormat().getPageWidth());
    }

    /**
     * Create a new instance of <code>PrintPreviewPane</code>.  You must specify page size for previewing.
     * This page size <strong>doesn't</strong> affect print result.  Page size parameters only affect
     * preview panel.  If you use the different paper size in the printer, the result will be different.
     *
     * @param text the string that will be displayed.
     * @param pageLength page length in number of lines.
     * @param pageWidth page width in number of characters.
     */
    public PrintPreviewPane(String text, int pageLength, int pageWidth) {
        this.text = text;
        outputPane = new OutputPane(text, pageLength, pageWidth);
        scrollPane = new JScrollPane(outputPane);

        toolbar = new JToolBar();
        printButton = new JButton("Print");
        printButton.addActionListener(this);
        PrintService[] printServices = PrintServiceLookup.lookupPrintServices(null, null);
        Vector<String> printerName = new Vector<>();
        printerName.add(PrintServiceLookup.lookupDefaultPrintService().getName());
        for (PrintService printService: printServices) {
            if (!printerName.contains(printService.getName())) {
                printerName.add(printService.getName());
            }
        }
        printerNameComboBox = new JComboBox<>(printerName);
        toolbar.setLayout(new FlowLayout(FlowLayout.LEADING));
        toolbar.add(printerNameComboBox);
        toolbar.add(printButton);

        setLayout(new BorderLayout());
        add(toolbar, BorderLayout.PAGE_START);
        add(scrollPane, BorderLayout.CENTER);
    }

    /**
     * Handler for print button.
     *
     * @param e <code>ActionEvent</code>.
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        if (printerNameComboBox.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(this, "You must select a printer.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        new SimpleEscp((String) printerNameComboBox.getSelectedItem()).print(text);
    }
}
